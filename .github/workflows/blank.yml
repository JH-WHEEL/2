name: Build and Package ZMK Firmware
on: [push, pull_request]

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取 ZMK 官方源码（确保包含 west.yml）
      - name: Checkout ZMK Source Code
        uses: actions/checkout@v4
        with:
          repository: zmkfirmware/zmk
          path: ./zmk  # 明确克隆到当前工作目录的 zmk 文件夹
          ref: main
          fetch-depth: 1  # 改为 1 尝试轻量拉取（若仍失败可删除此句）

      # 验证 ZMK 源码中是否存在 west.yml（新增调试步骤）
      - name: Verify west.yml exists in ZMK repo
        run: |
          echo "检查 ZMK 目录文件列表："
          ls -la ./zmk  # 列出 zmk 目录下的文件，确认 west.yml 存在
          if [ ! -f "./zmk/west.yml" ]; then
            echo "错误：zmk 目录中未找到 west.yml！"
            exit 1
          fi

      # 步骤2：拉取用户配置
      - name: Checkout User Configuration
        uses: actions/checkout@v4
        with:
          path: ./user-config
          fetch-depth: 1

      # 步骤3：安装依赖
      - name: Install Build Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y python3 python3-pip python3-venv
          pip3 install west
          sudo apt install -y gcc gcc-multilib g++-multilib build-essential cmake ninja-build

      # 步骤4：初始化并编译
      - name: Initialize ZMK and Build Firmware
        run: |
          cd ./zmk  # 明确进入正确的 zmk 目录
          west init -l .  # 基于当前目录的 west.yml 初始化
          west update  # 拉取依赖（这一步会生成完整的项目结构）
          west build -s app -b bt75_v1 \
                    -- -DZMK_CONFIG=../user-config/config \
                       -DBOARD_ROOT=${PWD}/boards/arm/ckp

      # 步骤5：上传产物
      - name: Upload Firmware Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./zmk/build/zephyr/*.uf2
